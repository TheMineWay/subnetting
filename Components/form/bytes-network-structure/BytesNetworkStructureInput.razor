@using global::subnetting
<div style="display: flex; flex-direction: column">
    <div class="label">
        <label>@label</label>
        @if (IsValid == true)
        {
            <RadzenIcon Icon="done" IconColor="green" />
        }
    </div>
    <div>
        @for (byte i = 0; i < Value.bns.Count(); i++)
        {
            var val = Value.bns[i];
            var index = i;

            <RadzenFormField>
                <RadzenTextBox MaxLength="3" style="width: 4em; text-align: center" Value="@val.ToString()" Change=@(v =>
                OnChangeRawBns(index, v?.ToString())) />
            </RadzenFormField>
        }
    </div>
</div>

@code {
    [Parameter]
    public string label { get; set; } = "";
    [Parameter]
    public Action<BytesNetworkStructure>? ValueChanged { get; set; }

    [Parameter]
    public bool? IsValid { get; set; } = null;

    [Parameter]
    public BytesNetworkStructure Value { get; set; } = new(new() { null, null, null, null });

    void OnChangeRawBns(byte index, string? newValue)
    {
        try
        {
            if (newValue != null) Value.bns[index] = byte.Parse(newValue);
            else Value.bns[index] = null;
        }
        catch (Exception)
        {
            Value.bns[index] = null;
        }

        try
        {
            ValueChanged?.Invoke(Value);
        }
        catch (Exception) { }
    }
}